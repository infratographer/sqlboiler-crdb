// Code generated for package driver by go-bindata DO NOT EDIT. (@generated)
// sources:
// override/override.go
// override/templates/17_upsert.go.tpl
// override/templates/singleton/crdb_upsert.go.tpl
// override/templates_test/singleton/crdb_main_test.go.tpl
// override/templates_test/singleton/crdb_suites_test.go.tpl
// override/templates_test/upsert.go.tpl
package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _overrideGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xc1\x8a\xdb\x30\x10\x86\xcf\x9a\xa7\x98\xfa\x50\xec\x60\xe4\x7b\x20\xb7\x12\x68\x0f\x3d\xb4\xbd\x95\x25\x28\xf1\xc8\x11\x6b\x4b\x62\x24\x07\xc2\xe2\x77\x5f\xa4\x38\x76\xd8\xe4\x66\x34\xf3\x7f\xff\x17\x29\x5e\x9d\xde\x55\x47\xe8\x2e\xc4\x6c\x5a\x02\x30\x83\x77\x1c\xb1\x04\x51\xd0\x70\xa4\xb6\x00\x51\x78\x15\xcf\x8d\x36\x3d\xa5\x8f\x02\x2a\x80\xa6\xc1\x93\xb3\x91\x6c\xc4\xb3\xeb\xdb\x80\x6e\x64\x8c\x34\xf8\x5e\xc5\x95\x16\xa0\x69\x3a\xb7\xcd\x9c\x65\x1a\x9a\xcd\xfa\x7d\x88\x14\x62\xb3\x81\x8b\x5a\xe3\x01\x73\x40\xee\xff\x02\xe8\xd1\x9e\xf0\xdf\x3c\x28\x93\x82\x55\x03\x61\x88\x6c\x6c\x57\x61\xf9\xff\xed\x78\x8d\x54\x23\x31\x3b\xae\xf0\x03\x04\x53\x1c\xd9\xae\x30\xf9\x87\x54\xbb\x37\xfd\x9a\xae\x60\xfa\x02\xde\xcf\x93\x50\x66\xe4\x8d\xfe\x02\xaa\x97\xbd\xef\x0b\xbf\xc6\x42\x16\x2b\x72\x5d\xd1\x01\x37\xf7\x1f\x52\x63\xba\xb9\x47\xed\xe7\x0e\xb2\x91\x4d\xe2\x11\x33\x6e\x77\xa8\x6f\xea\x3f\x0c\x97\x29\x5c\x81\x30\x3a\xcf\xbe\xed\xd0\x9a\x3e\x45\xee\x5e\xd6\xf4\x39\x06\x62\x02\x91\xae\xd2\x8d\x11\xef\x1d\x20\xb4\x63\x3c\xd4\x98\x0a\xae\x89\xcc\xca\x76\x84\x73\x5f\xe6\x68\x9f\x1b\xe7\x17\x96\xbf\x9c\xb1\xb9\x74\x0e\xc9\xdf\x6a\xa0\xb2\xaa\x40\x64\x87\x7c\xf4\x33\x24\xb3\x6c\x9e\x3c\x1e\xbc\x1f\x6e\xa0\x46\xed\x53\xea\x85\xfa\x0b\x79\x91\xf4\x85\x48\xf2\x3b\x54\xde\x93\x6d\x4b\x37\xc6\x1a\x99\x82\x94\x32\x83\xd2\xbf\xce\xd8\x91\xe0\xb6\xfc\xbc\x9b\x0b\xa7\xe5\xc9\xf2\x99\x35\x3d\x4c\xf0\x19\x00\x00\xff\xff\x2b\xcb\x4c\x21\xec\x02\x00\x00")

func overrideGoBytes() ([]byte, error) {
	return bindataRead(
		_overrideGo,
		"override.go",
	)
}

func overrideGo() (*asset, error) {
	bytes, err := overrideGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "override.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdd\x72\xdb\x3a\x0e\xbe\x96\x9e\x02\xcd\xec\x34\xd2\x8e\xa3\xec\x75\x76\x7c\x91\x9f\xb6\x9b\xe9\x36\xf5\x36\x4d\x3b\xb3\x9d\x4e\x86\x96\x20\x9b\x13\x9a\x54\x29\x2a\xa9\x57\xab\x77\x3f\x03\x92\xb2\x24\xff\x24\x6e\x4f\x7b\x4e\xcf\x55\x2c\x12\x04\x3e\x00\x1f\x01\x30\x75\x0d\x3c\x07\xa9\x0c\x24\xef\xd9\x54\x60\x72\x59\x7e\xe0\xf8\x00\x4d\x13\xd6\xf5\x11\xfc\x8d\x09\xce\x4a\x38\x19\x43\x72\x4a\xbf\xb0\x74\x62\xad\xf4\x15\x5b\x60\x2b\x5a\xa6\x73\x5c\x30\xb7\x4d\x07\x3a\x09\xf8\x3f\x24\xd7\xdd\xae\x3d\xc0\x73\x48\x4e\xb3\xec\x95\x50\x53\x26\xe0\xa8\x69\xc2\xe3\x63\xb8\x29\x4a\xd4\xe6\x15\x30\x63\x70\x51\x98\x12\x98\x04\x2e\x69\x6d\x04\x4c\x66\x90\x29\xb4\x6b\x55\x91\x31\x83\xa0\x34\xf0\x99\x54\x1a\x41\x49\x48\x95\xcc\x05\x4f\x4d\x12\xe6\x95\x4c\x21\x52\xf0\xf7\xba\x76\xf8\x93\x9b\xe2\x9a\xcb\x59\x25\x98\x6e\x9a\xb8\xb5\x12\x59\x10\xd6\xf5\x2b\x75\xae\xa4\xc1\xaf\xa6\x69\x52\xf3\x95\x54\xd1\x47\xe2\x17\x47\x50\xd7\x28\x33\x02\xe9\x2d\xbf\x95\xe7\xde\x1a\x4c\x95\x12\xa3\x95\xf1\x73\x25\xaa\x85\x2c\xe1\xd3\xe7\xd2\x68\x2e\x67\x23\x7f\xc0\xaf\x8f\xbc\x37\xad\xd8\x54\x71\x91\xf8\x8f\x18\x50\x6b\xa5\xa1\x0e\x03\x8d\xa6\xd2\x12\x54\xe2\x90\x3a\xa0\x7d\x90\xf6\xdc\x2b\x34\x17\x67\x51\x5c\xd7\x28\x4a\xb4\xc0\x47\xd0\x6e\x78\x49\xbf\x2f\xb3\xa6\x19\x6d\x40\xdf\x40\xfd\x38\xd8\x38\x6c\xc2\x70\x15\x88\xd0\xa5\x90\x92\xd2\x4b\x23\xfd\x9c\x30\xc9\xd3\xb5\x84\x4e\x7e\x5f\x46\xc1\xea\x2c\x69\xcd\xc6\x68\xef\x14\x4f\x7e\xb9\x1c\xd7\x61\xc0\x73\xf2\x82\xae\xc8\x2f\x96\xe0\x7f\x5a\x5c\xcf\xc6\x20\xb9\x20\xa0\x41\x41\x61\x8f\xac\xc9\x8f\x9a\x15\x2f\xb4\x8e\x50\xeb\x38\x0e\x83\x66\x1b\x19\x76\x64\x7f\x5b\xf2\xa1\x2a\xb9\x9c\xd1\x37\x7e\xc5\xb4\x32\x4a\x7f\xcb\x05\xef\xa9\x2e\xbe\x8f\x19\x93\xcd\x90\x13\x10\x17\xde\x17\x1e\x52\x2f\xf0\x9b\x74\xe9\xc4\xfd\x52\xef\xd4\xf6\x74\xfc\x41\x34\xda\x42\xf6\x3e\xb9\x09\xf7\x9f\x4a\x95\x55\xf2\x7e\x06\x2d\xae\x11\x07\x91\x82\x4c\xa5\xd5\x02\xa5\x61\x86\x2b\x09\xb9\xd2\x30\x57\x0f\x60\x14\x14\x5a\x15\xa8\xc5\x12\xaa\x12\x87\xbe\x5a\x8b\x03\x77\xf7\x65\xd5\x5f\x9c\x54\xab\xfe\xc3\x73\x50\x30\xee\x92\xeb\xfb\x91\xdd\x2f\x93\x2b\x7c\x88\x0e\xea\x3a\x99\xdc\xcd\x5c\xfb\x3f\x01\xa9\xa0\xae\x07\x23\x01\xc5\xf7\x9e\x67\x98\xd9\x98\x57\x36\x3c\x07\x96\x0d\x61\x40\xd3\x02\x65\x5e\x50\x2e\x0f\x0c\x5f\x60\x69\xd8\xa2\xb8\x75\x52\xb7\x73\x14\x05\xea\x03\x48\x68\x08\x21\xe9\x8e\xd4\xff\x52\xea\xae\xb4\x34\x1a\xd0\x3f\x53\x67\x98\x2b\x8d\x2e\x0b\x56\x68\xef\xbb\xb0\x49\xe5\xce\x5b\x82\x6b\xd1\xda\xe0\x87\x61\x20\xff\x77\x81\x39\xab\x84\xb1\x23\xd1\x97\x0a\x35\xc7\x32\xb9\x52\xf2\xbf\xa8\x95\xdf\xba\x46\xe2\x81\x67\xc9\x85\x7a\x90\x1d\x4f\x7c\xa4\x3f\x72\x33\xf7\xc2\x23\x50\x71\x18\x06\xc7\xc7\x70\x56\x71\x91\x41\xca\xd2\x39\xc2\x1d\x2e\x81\xcb\x23\xc1\x25\x42\x35\x13\x5c\x2c\xe1\x08\x16\xcb\xf2\x8b\x80\xfb\x12\x0a\xfa\x5b\x68\x35\x15\xb8\x28\xc3\x60\x5a\xe5\x04\xa6\x34\x7a\xc1\xe4\x4c\x20\x75\x87\xb3\x2a\xcf\x51\x47\xb1\x0d\xd3\x06\x65\xc8\xc9\x69\x95\x27\x1f\x35\x37\x78\xb6\x34\x18\x1d\x9a\x43\xca\x0d\x10\x35\xb7\x6d\xe7\x76\x3b\x5c\x5f\x4e\x68\x99\xf2\x7b\x3b\x82\x94\x40\x68\x26\x67\xb8\x41\xc6\x81\xc2\x6b\xcb\xcb\x28\xdd\xad\x70\x5d\xb4\x34\x3a\x55\xf2\x3e\xb9\x34\x8a\x45\x03\x3a\x27\xaf\xb9\xcc\xe2\xad\x18\x86\x72\xe7\x4a\xfc\x58\x18\xc3\xf2\xb0\x1b\xc6\x50\xee\x7b\x60\x6c\xea\xec\x91\xf0\x11\x5d\xc4\xa1\x93\x31\xd0\xae\xdf\x88\xc3\xa0\x23\xc9\xa4\x6a\x49\x32\xad\xf2\xd8\x5e\xb3\xad\x94\x75\x57\xea\x9c\x68\xf9\xa6\x32\xc9\xbb\x7f\xab\xf4\x8e\x34\x59\xa2\x8e\x1c\x5f\x33\x32\xf4\xf4\xf9\x4f\x77\xb8\xfc\xbc\xb7\xa1\x1b\x29\x9c\xa9\x30\xb8\x67\xda\xde\x51\x5b\x7f\x42\xcb\xe9\x67\xde\x30\x05\xa0\x1d\x27\x35\x1a\x02\x32\x0c\xf9\x65\xef\x8b\x6e\x66\x18\x04\xbb\x10\x9c\x0a\xd1\x96\xc9\x47\xa4\xb6\xdc\xe1\xfd\xa4\x55\x65\xfa\x07\xba\x2c\xd2\x67\x1c\x06\x81\x6f\x6e\x27\xe3\x35\xf2\xde\xf4\xbe\x7e\x88\x0b\x13\xcd\x17\x4c\x2f\x5f\xe3\xb2\x27\x4c\x81\xde\x5a\x2d\x9e\x3f\x07\x81\xd2\x5f\xbc\x98\xda\xc2\x3f\x6c\xd8\x9f\xee\x0a\x95\xb4\x6f\x41\xa3\x7c\xfd\x5f\xef\x11\xd4\xb6\x2a\x91\xd9\x2a\x3d\xb5\xe5\xcf\x87\x20\xb5\xb0\x40\xf0\xd2\xf6\x0c\xdb\x34\x82\xb6\xaa\x50\x80\xd6\x2a\x8c\x43\x4e\x28\xdb\x8d\x3e\xce\xd5\xc1\x31\x2c\xd8\x1d\x46\x5d\x6f\xa4\x13\xfb\xc6\x88\xee\x37\xe9\x2a\x96\x2b\x23\xa3\x5d\xa4\xdf\x3c\x6c\x9d\x08\xdc\xad\x49\xa8\x6f\x2c\x61\xec\x7c\x76\xbc\xff\x0f\x2d\x9d\xab\xf4\x4e\x2b\x96\xce\x2f\xce\xa2\x8c\x33\x81\x64\xe2\xa0\xae\xfb\x2f\xeb\xa6\x39\xd8\x36\xbd\x69\x34\xed\x72\x37\x0c\xb4\xdd\xde\xa6\xd6\x99\xbe\x67\xa2\xc2\x37\xac\x28\xac\xff\x74\xa9\xba\x36\x76\xc6\x65\xe6\xb7\x76\x45\xe5\xfd\xb2\xc0\x9d\x5e\xaf\xd4\xb6\x56\x83\xb6\x49\xf7\x9a\xeb\xa0\xbb\xda\x98\xf8\xcc\x69\x34\x31\x09\xb6\x49\xb3\x70\x35\x9a\x9f\x0d\x96\xec\x92\xc1\x2d\x50\x87\x58\x2d\xd8\xc6\x4d\x30\x36\x8c\xb6\x22\x63\x4e\x69\x4a\x2e\x65\xc6\x35\xa6\x26\x6a\x17\x3e\x90\xc4\xdb\x3c\x52\xc4\x9b\x7b\x26\x06\x03\x83\xdd\x2c\x5f\x6a\xb5\x68\x5d\xb0\x0a\x7d\x39\x1d\x24\x29\x76\xe5\xcf\x21\xa1\xb9\x8e\x4b\x83\x3a\x67\x29\xd6\x6e\x08\xb2\xac\x5f\x0b\x56\x2f\x90\xed\xc1\xce\xf8\xc4\xe8\xdd\xa6\x7b\x3a\x9c\xa7\x3c\x77\x43\xe2\x05\x4e\xab\xd9\x1b\x95\xb9\xf1\xe0\x76\x04\xb7\x30\x86\x7c\x61\x92\x97\x85\xe6\xd2\x08\x19\x75\x62\xb6\x1b\xe9\x56\xa5\x65\x7b\xbc\xf7\x21\x8a\x55\x67\xfb\x09\xef\xd6\xe6\x6d\x37\x19\x06\x8e\x29\x34\xdc\x25\xf6\x5e\xbd\x53\x0f\x51\x0f\x8b\xb3\x91\x24\x49\x9c\x5c\xa7\xcc\x32\x8f\x42\x44\x0b\x56\xa5\x1d\x82\x76\x6a\xf2\xa6\x22\x3b\x4a\x7e\x8b\x56\xff\xfe\x59\x31\x6d\x3c\x86\xf2\x8b\x48\x5e\x68\x7d\xa5\xde\xa9\x07\xd7\xcc\xbd\x45\xa2\xe0\xf1\x31\x50\x41\x48\x95\xb6\x15\xc1\xbe\x81\xe4\xa1\xf1\x54\x00\x26\x97\x66\x4e\x8f\xa5\x87\x39\x4a\x30\x73\xd4\x78\x58\xd2\x20\xee\xaa\x80\xe7\x6a\x37\xd1\x6d\x0f\xd5\x6d\x7b\xaf\xac\x8f\xf4\xda\xd8\x1e\xa9\xf5\xc0\x6c\x9e\x7b\x3a\x2e\xc3\x30\x74\x23\xfc\xd6\xd1\x9b\x5a\x0a\x3d\x24\xe9\x15\x69\x8b\xe0\xb7\x34\x96\x83\x8e\x40\xfd\x41\x61\xbf\xc9\xa3\x9d\x70\xf6\x10\xb7\x13\x0d\x8c\x9d\xbb\x7b\x1b\x58\x4d\x36\xc1\x23\xcf\x9b\xd5\xbf\x00\x33\x75\x9a\x1b\xd4\xdf\xf5\xb4\xf1\x8f\x97\x55\xda\xbc\x52\xc9\x45\xff\x59\xd3\x84\x75\x4d\x3f\xa1\x69\x7e\x0b\x00\x00\xff\xff\xbf\xd8\x67\x15\x0e\x16\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonCrdb_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x6d\x6f\xda\x3c\x14\xfd\x6c\xff\x8a\xdb\x48\x55\x13\xc9\x0a\x4f\xbf\x3e\x12\x1f\x5a\x92\x76\x4c\x28\x14\x48\xb6\x49\xd3\x54\x85\xe4\x06\xac\x05\x87\xf9\x85\xb6\x5a\xf9\xef\x93\xf3\x42\x68\xe9\x3a\x55\x42\x06\xf9\xde\x73\x7c\x7c\x7c\x2e\x83\x01\x2c\x0d\x2f\xf3\x64\xab\x50\xea\x99\x41\xf9\x34\xaa\xb2\x9f\xb2\x4a\xb3\x75\x70\xdd\xd4\x14\xa4\xb0\x98\x4d\x40\xe9\x54\xe3\x06\x85\x06\xa5\x25\x17\x2b\x30\xca\xae\x7a\x8d\x60\x6a\x78\x90\xea\x14\xb6\xb2\xda\xf1\x1c\x73\x9f\x16\x46\x64\xef\xb1\xbb\x39\x4f\x21\x97\x7c\x87\x52\xf9\x01\x4f\x4b\xcc\x34\x03\x9d\x2e\x4b\x8c\xd2\x0d\xb6\xa7\x30\x30\xdb\x3c\xd5\x38\x15\xa3\x4a\x14\x25\xcf\x34\x2c\xab\xaa\x64\x20\x51\x77\x35\x06\x59\x5b\x63\xf0\xb0\xe6\x1a\x4b\xae\x34\x7c\xff\xd1\x30\x78\x9d\xde\xdf\x94\x74\x7d\x30\xb4\x9b\x9b\x54\xac\x4a\xf4\xc7\x39\x0a\x3d\x33\x95\xc6\x45\xc9\x33\xb4\xba\xfc\xc9\x8c\x81\xfd\x9e\xcf\x7a\x72\x8f\x92\x9e\xfd\x23\x04\x07\x94\x47\x89\xc4\x8f\x61\x25\x6a\x8f\x52\xb2\x34\x05\xfc\x7f\x8c\xbb\x45\x7d\x6d\x8a\x02\xa5\xeb\x51\x92\x63\x81\xf2\xa8\x78\x67\xba\xe2\xd2\x14\x16\x9e\x55\xa5\xd9\x08\x65\x29\x9c\x20\xbc\xb9\x4a\x26\x31\x7c\xb9\x9a\x24\xe1\xc2\xa1\x84\x17\x50\xa2\x70\x7b\x95\x70\x36\x84\xff\xac\x5d\x07\xdc\x10\x8a\x8d\xf6\x17\x5b\xc9\x85\x2e\x5c\xc7\x3d\x57\x5e\x8b\x07\xfb\xdb\x61\x94\x10\xd2\xd8\xac\xfc\xcf\x15\x3f\x62\x63\xe0\x30\x70\xbc\xae\xa3\x53\x58\xa6\x19\xae\xab\x32\x47\xa9\xea\x3b\x27\x0a\xc7\x22\xc7\xc7\xe3\x02\x7b\xa5\x8b\xc1\x25\x83\x4b\xcf\xa3\x64\x4f\x29\xb9\x67\x70\xdf\x0a\xbb\x69\x85\x51\x62\x8d\xb2\x47\x39\xe3\x68\x11\xce\x63\x18\x47\xf1\x14\xce\x95\xfd\x4c\x23\x18\x4d\xa3\x9b\xc9\x78\x14\x43\x2d\xf8\x10\x35\xd6\xdf\x94\x51\x62\xfd\x1a\x0c\x20\xeb\x92\x0a\xf8\xb8\xc5\x4c\xab\x3a\xe9\x87\x00\xe1\x0e\x05\xe8\x75\x65\x56\x1a\x1e\x10\x52\x89\x20\x2a\xdd\x04\x92\x8b\x55\xfd\x62\xfe\x57\xc9\x35\x5e\x3f\x69\x74\x2f\xdc\x0b\xef\x68\x6f\x51\x5b\xe5\xbe\x70\xac\xcf\x70\x6d\xd8\x1b\xed\x8e\x07\x8e\x55\xc7\x0b\x38\x3b\x99\x8a\xe7\xe7\xda\xad\x66\xdf\x83\x61\xf7\x84\x27\x24\xc1\x14\xa2\x69\xfc\x69\x1c\xdd\x3a\xd6\x49\xc0\x52\xe1\x5f\x3b\x93\xbb\xe0\x2a\x0e\x61\x11\xc6\xcd\xd1\xa4\xa8\x24\x70\x06\x3b\x1b\x25\x99\x8a\x15\xb6\x33\x58\x33\x58\x65\xbc\x4f\x0f\x79\x6d\x02\xb3\x26\x10\xb2\xb7\xcb\x2f\x9b\xf9\xfc\x65\xa8\xfb\x61\x38\x99\x83\x5d\x8d\x7c\x2d\xb1\x21\x79\xb3\xe4\xc0\x10\xc2\x6f\xa3\x49\x12\x84\x81\xef\xfc\x03\xbd\x6f\x22\xd5\x4e\x82\x9d\xb9\xfe\x16\xa7\xc4\xf3\x30\x4e\xe6\xd1\x38\xba\x85\x9a\xf7\xdd\x57\xad\xff\xa6\xba\x07\xb5\x67\x48\xd4\x46\x0a\xb0\xa0\xb6\xdf\xa3\xfb\x3f\x01\x00\x00\xff\xff\xb7\x86\x27\x52\x88\x05\x00\x00")

func templatesSingletonCrdb_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonCrdb_upsertGoTpl,
		"templates/singleton/crdb_upsert.go.tpl",
	)
}

func templatesSingletonCrdb_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonCrdb_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/crdb_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonCrdb_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdd\x73\xe3\xb6\x11\x7f\x3e\xfd\x15\x1b\xcd\xf8\x4c\x7a\x68\x28\x7d\xf5\x8d\xc6\x95\x25\x3b\xf5\xc4\x67\x5f\x25\xb5\xd7\x36\xce\x24\x10\xb9\x94\x30\x26\x01\x1a\x00\xad\x53\xae\xfe\xdf\x3b\x0b\x80\x22\xa5\x93\x2f\x6e\xd2\x69\x5e\xf4\xb1\xd8\xef\x0f\xe0\xb7\x4f\x5c\x83\x5e\x7e\x1a\x4f\x2e\xae\x1e\x70\x03\x43\xd0\xb8\xc4\x4f\x15\x7b\x5f\x1b\x3b\x56\x65\x25\x0a\x8c\x7e\x8e\xce\xcb\x38\x8a\xee\x65\x7c\xce\x4e\xc6\x77\xb7\xb3\xf9\x74\x74\x7d\x3b\x67\x27\xe7\x57\x77\xd3\xcb\xeb\xef\x6e\xe1\xfb\xcb\x7f\xb2\x93\xf3\x7b\xf9\x6f\xc7\xf4\x03\x3f\xfd\x65\x74\xfa\x2f\xf8\xe9\x9e\xfd\x78\xf2\xf7\xd1\xcd\xf5\x64\x34\xbf\x84\x1d\x41\xc7\x1d\xff\x1c\xf7\x7a\x76\x53\x21\xa4\x3a\x5b\xcc\xd1\x58\xd4\x60\xac\xae\x53\x0b\x9f\x7b\x00\xd9\x62\xac\xa4\x84\x13\xf3\x58\xb0\xc9\x45\xcf\x51\x6e\x79\x89\x40\x4c\x42\x2e\x7b\x00\x2b\x65\x2c\x40\x87\x50\x1b\xd4\x3b\x84\x8a\x1b\xb3\x43\x30\xa6\x28\x55\x86\x1d\x0e\xa5\x9d\x0e\x21\x2d\xd9\xb0\x68\xec\xe4\xc2\xd9\x09\x2c\x5b\xe2\xdf\xa6\x37\xad\x58\xb6\xa0\xbf\x1d\xd5\xcf\xbd\x5e\x5e\xcb\x14\x84\x14\x36\x8a\x43\x04\xef\xb9\x90\x30\x84\xb7\x6d\x84\x9f\x9f\x89\x73\x30\x00\x83\xb6\xae\x20\xab\xcb\xca\x80\x5d\x21\x64\xdc\xf2\x05\x37\x08\x26\x5d\x61\xc9\x81\xcb\x0c\x44\x49\xde\x19\x10\x96\xdc\x53\xc0\xc1\x22\x91\xb8\xde\x80\xe6\x32\x53\x65\xb1\x21\x5d\x4b\x94\xa8\xb9\xc5\xcc\x79\xda\x51\xa5\xc0\xae\xb8\x75\x54\x03\x29\x97\xb0\x40\xd0\xb5\x04\xbe\xe4\x42\x1a\x4b\x8a\x6b\x23\xe4\x92\x3c\xd8\x55\x64\x1e\x8b\x85\x12\x05\x6a\xb8\x9b\xbe\x87\x8a\xa7\x0f\x7c\x89\xcc\x87\x18\xa5\x70\xd2\x46\x14\xfb\x50\xa2\x18\x50\x6b\xa5\x5d\xe4\xd4\x57\xa8\xb5\xa7\x50\x06\x53\x16\x8a\x37\x84\x27\x51\xa1\x66\xdf\xa1\x9d\xb9\xc4\x45\x7d\x52\xc5\xb2\x85\xe4\x25\xf6\x63\xc7\xeb\xea\xfa\x12\x27\x1d\x06\x3e\x57\xee\x97\xf8\xe8\x30\xf0\xb9\x2e\x78\x89\x8f\x0e\x1b\x3e\xea\x85\x0e\xdf\xb5\xb4\x0d\x93\xd2\x8d\xd1\xa6\x83\x5e\xd2\x17\xce\x1d\xf7\x60\x00\x63\x8d\xdc\x22\xf0\x50\x30\xf1\x0b\x66\x90\x2d\x80\xa2\x65\x4e\x5f\xa7\xe3\x86\x2d\x13\x9b\x59\xbe\x28\xd0\x1f\x44\x4d\xfa\xe2\x5e\x47\x84\x1a\x70\x08\x8b\x5a\x14\xd9\x5f\x6b\xd4\x9b\xe0\x85\x4f\x4b\x12\xc2\x4e\x76\x2c\x24\x21\xb9\x49\x08\x36\x69\xe3\x89\x43\x95\x5e\xad\xd5\x7b\xf4\x55\x8d\x3d\x00\x91\xbb\x46\x18\x92\x80\x56\xd5\xdc\xb9\x12\xc5\xef\x1c\xf5\x9b\x21\x48\x51\xb8\x8e\x01\xd0\x68\x6b\x2d\x89\xde\x03\x78\xde\x15\x4d\x5d\x12\x5f\x2f\x4c\xc3\x57\x97\xd5\xb8\xcc\xe0\x6c\x08\xf8\x09\x53\x36\x56\x65\xc9\x65\x16\xf5\x53\x95\x3e\x68\xc5\xd3\x55\x3f\x81\xbe\x79\x2c\xe8\xeb\xf4\xb4\xd6\xf4\x23\x24\xc0\x51\x84\x34\x98\xd6\x1a\xdd\xb9\xfb\x9c\xfd\xe5\xee\x23\x8c\xa7\x97\x74\x9f\x8d\x6e\x6e\x60\x3e\xba\xb8\xb9\x9c\xf9\xb6\x70\x0e\xfe\x06\x7b\xdb\x52\x3a\x6a\x33\xb9\xfd\xfd\xb2\x75\xfd\x71\x79\xd5\x09\xac\xc9\x96\x50\xec\x83\xa8\x30\x8a\xdb\x90\xd9\xcc\x66\xaa\xa6\x46\x5e\x77\x3d\x23\xb2\xbb\x8d\x24\xae\x67\x2b\xb5\xf6\x8d\x39\xa7\x2e\xbb\x12\x85\x45\x1d\x49\x5c\x5f\x7d\x8f\x9b\x09\x1a\xab\xd5\x06\x75\xd4\x3e\x0d\x09\xe8\x78\xb7\x9e\xad\x31\xae\xed\xc1\x9a\x74\xab\xa2\xb4\x61\x1f\x35\xaf\x22\xd4\x3a\x81\x7e\xce\x45\x41\xb7\x95\x02\x43\xe2\x70\xbc\x4d\x92\xd3\x7b\x0c\xa9\xcf\x9e\xcb\xed\x6e\x2f\x74\xc2\xf9\xdf\x1a\x36\x8f\xc5\xbe\xdd\x43\xf1\x7e\xe4\xe2\x77\x58\x5d\x73\x61\x21\x57\xfa\xd7\x0d\x0f\x06\x30\xca\xe9\x49\x6c\x1a\x59\x18\xc8\x94\xa4\x81\x2b\x94\x41\xf7\x66\xac\xb5\xb0\x08\x28\x33\x50\xb9\x23\x54\xa2\xc2\xae\xd3\x6b\x36\x26\xe6\xdf\xee\xaf\xb7\x45\x6a\x0f\xa4\xa4\xad\xc5\xff\x2b\x29\x41\x99\x14\xc5\xf6\xbd\xdd\x7f\x8c\x74\x2d\xc7\x65\x16\x19\x6a\xf6\xa4\xd1\x10\x1e\xe9\x04\xb8\x5e\x1a\x60\x8c\xf9\xff\xdd\x27\x2b\x3d\x30\xbb\x41\xda\x8b\x31\xc6\x62\xcf\xc7\x2e\xe5\x13\x0c\x41\x19\xfa\x21\xb4\x92\x51\x33\x1a\x05\x4a\x6f\x39\xa6\x34\x7c\x1b\x92\x90\x76\x86\xcf\x1b\x36\xec\x16\xd7\x53\xe4\x19\xea\xc0\xdf\x44\x68\xfc\xec\x9e\x0d\xe1\xed\x62\x63\xd1\xb0\x8b\x3a\xcf\x1d\x6c\x70\x67\x94\xe0\x83\x67\x69\x77\xee\xbd\x92\x96\xea\xcb\xe5\xc5\xdb\x02\x9e\x0d\xdd\xf9\xb4\x96\x07\x4b\x97\x97\x96\x7d\xd0\x42\xda\x42\x46\x4d\xb1\x74\x2d\xa5\x90\xcb\xb3\xfe\x36\xb3\x3e\x37\xf1\x17\x12\xde\x05\x16\x5e\x8f\xf8\x20\x03\x6a\xbd\xc7\xf0\xe5\x35\xfe\x8a\x8a\xef\x3e\x0e\x9d\x92\x1a\x5b\xba\x4c\x92\xd9\x59\x45\x76\xf3\xa8\x1f\xee\xef\xc9\x68\x3e\xba\x18\xcd\x2e\xe1\xc8\xec\x5d\xb6\x71\x6b\x35\x65\xa1\x9b\xfa\x74\x69\xff\x37\x17\xf9\xce\xe3\x71\x4a\x4d\x55\x5b\xfa\x43\x2e\xc5\x2f\x46\xd2\x7d\x21\x7f\x2d\x8e\xc9\xf4\xee\x43\x1b\xc5\xf5\x15\x5c\xfe\xe3\x7a\x36\x9f\xc1\x91\x81\xf1\x68\x36\x1e\x4d\x2e\xff\x90\xb8\x06\x03\xb0\xc8\x75\xa6\xd6\x12\xc2\xb1\x81\xb4\x40\x2e\xeb\x0a\x2c\x37\x0f\x06\xd6\x2b\x94\xee\xb6\xf2\xb0\x34\x17\x52\x98\x55\xd3\x5a\x87\x13\xd3\xa8\xfc\x0a\xc8\xdc\x85\x1a\x6e\x77\xf8\xca\xe5\xf7\x05\xd8\x68\x64\xc0\x71\xfd\x2e\xe4\xf2\xca\xae\x55\x92\xc2\x89\xc2\x7e\x93\xf8\x30\xfc\xe2\x20\xf2\xd6\x9f\x43\x96\x9a\xc3\xc4\x59\x08\x36\xf7\xd3\xd1\x32\x85\xf1\x7f\x2c\xd8\x5d\x85\x32\xea\x57\xca\xd8\xa5\x46\xb3\x5b\xdf\xb8\x8d\xf9\x90\x4d\x29\x8a\xe4\x40\x88\xbb\xae\x34\xc1\x7e\x01\x1f\x3d\x78\xf4\xd0\xd1\x43\xfd\xc4\x6f\x6f\xcd\xc5\xec\xa0\xb7\x90\x36\xd9\xdb\xd0\xe2\xf0\x0d\x9f\x7b\x6f\x28\xc2\xba\x6a\x16\xae\x37\x22\xf7\xfb\xde\x37\x43\xe8\xf7\xe9\xfc\x4d\x5d\xc1\xd0\xd1\x7a\x6f\x9e\xdd\xb9\x03\xfe\x7b\xe7\x3b\x53\x74\x64\xce\xdc\x05\x50\x57\xde\xbb\x98\x24\x7b\x6f\x42\x70\x3b\xac\x4d\xd6\x1e\x8b\xb3\xc1\xe0\xc8\xfc\x99\x44\xb3\xc1\x91\x39\x0f\x0e\x0f\xb7\x8a\x3c\x1e\xf6\x68\xb8\x09\x76\x8b\x89\x9f\x7b\x61\xeb\x35\x5b\x0c\xe6\xe1\x57\x77\xf7\xd5\xee\x69\x20\x70\xe7\x1f\x89\x1e\xc0\xa2\xce\xe1\xa4\x7b\xed\x6f\x93\xfd\x22\x9e\xdb\xd7\x12\xb7\x3f\x83\x15\x17\xe5\xdb\x7d\x4f\x9a\xba\x13\xe3\x59\xf8\x4e\x5c\xdd\xc9\xf9\xc1\x00\xe6\x2b\x24\xab\x30\x9e\x4e\x2e\xe0\x09\xb5\x11\x4a\x3a\x74\x72\x6c\x61\xc5\x9f\x3c\x38\x21\xdc\xb2\x7d\x7f\x0b\xf1\x80\xa0\xec\x0a\x35\x4c\x2e\xde\xcf\x48\x09\x2d\xa0\xc8\x33\xcf\xab\x52\x03\x86\x6f\x08\x0d\xd4\x06\xe1\xf8\x30\xd4\x3e\x86\x45\x6d\xfd\x4a\x9b\x72\x79\x6c\x49\xcd\x02\x21\x13\x1a\x53\x5b\x6c\x20\xf7\x78\x82\x34\xbe\x00\x25\x98\x77\x5f\xd0\xb5\xe3\x92\xae\xb1\x54\x4f\xe8\x57\x70\xa9\xe4\xa9\x79\x2c\xa0\xe2\xb4\x74\x07\x48\x45\x71\xaa\xda\x56\xb5\x6d\xb6\xdf\x1c\x4e\xf6\x33\x16\x03\xa5\x35\x5a\xc0\x0f\x3f\x52\x89\x62\x88\x5c\x2b\xef\x8e\x74\xce\xa8\x86\xc3\xee\x6c\xf1\xc2\x0f\x55\x40\xf2\xa4\x64\x54\x14\x51\xce\x7c\xd2\x1d\xac\x38\x3c\x95\xdb\xea\x7d\xdb\x4c\x65\x98\x4b\xa7\x94\x36\x38\xd7\x2a\x53\xac\x0a\x9e\x62\xe4\x0c\x79\xe7\x68\x4d\x25\xcf\x7f\x32\x96\x5b\x2c\x51\xda\x7e\xdc\x9c\x7d\x7e\x4e\xe0\xf4\x4f\xf1\xeb\xd4\xdc\x87\xb7\xb4\x15\x8f\x3a\x94\x57\xab\x79\x77\xdf\xef\x6a\x78\xd7\x15\x0e\x29\x0b\xe2\xb7\xb8\xf6\xad\x4f\x0a\xf6\x31\xa1\x63\x65\xbe\x0c\x34\x65\xff\x09\x00\x00\xff\xff\x09\xe0\x0d\x12\xdb\x12\x00\x00")

func templates_testSingletonCrdb_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_main_testGoTpl,
		"templates_test/singleton/crdb_main_test.go.tpl",
	)
}

func templates_testSingletonCrdb_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonCrdb_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\xca\x83\x30\x10\x84\xef\xff\x53\x0c\xe2\x41\x7f\x34\x0f\xf0\xc3\x7f\xea\xa9\x3d\xf4\x50\xec\x03\xa4\x75\x95\x40\xba\x15\xb3\x42\x21\xe6\xdd\x8b\x31\x58\x7b\xcb\x64\xe6\xdb\x9d\xed\x26\xbe\xa3\x21\x27\xd7\xc1\xd1\x28\x85\xe0\x57\xc8\x89\xe1\x5e\x35\x25\xfc\x0f\xe0\x7d\x8d\x51\x73\x4f\xc8\x0d\xb7\xf4\xaa\x90\x8b\xbe\x59\xc2\xdf\x3f\x54\xb3\xbc\x5c\x08\x29\x67\xba\x64\xaa\xa3\x3b\x3d\x0d\x47\x1b\xf5\xe6\x93\x75\x7b\xb9\x66\xcf\xfa\x11\x87\x25\x32\xca\x19\x83\x9d\x46\x6d\x31\x43\x8c\x58\x3a\xe8\x0d\x14\x75\x99\xb8\xc8\xbc\xff\xd0\x21\x64\x15\x96\xda\xdf\x9f\xeb\x49\x65\x5c\x46\xdc\xee\x7b\x24\x15\xde\x01\x00\x00\xff\xff\x91\x6e\x4f\x2d\xff\x00\x00\x00")

func templates_testSingletonCrdb_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_suites_testGoTpl,
		"templates_test/singleton/crdb_suites_test.go.tpl",
	)
}

func templates_testSingletonCrdb_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\xf1\xb5\xa0\x0a\x85\x41\xaf\x29\x7c\x70\x7e\x0e\x41\x51\xc3\x88\xe5\x73\xc1\x48\x2b\x87\x30\x4d\x0a\xe4\xaa\xb6\x2b\xf0\xdd\x0b\x52\x4e\xe2\xfc\x15\x46\xd1\xa2\xe8\xc1\x96\x48\xcc\xce\xec\xce\xee\xaa\xef\x4f\xe0\x7f\xa9\x95\xf4\x70\x36\x06\x31\x89\x6f\xe8\x45\x29\x6f\x35\xc2\xf0\x10\x53\xb9\xc6\x10\x58\xd3\x99\x0a\x08\x3d\xf5\xfd\x10\x21\x16\xed\x4c\x77\x4e\xea\x10\x16\xad\x47\x47\x9c\xe0\x43\x04\x28\xb3\x14\x65\x0e\x3d\xcb\x48\xcc\xa4\x93\x5a\xa3\xe6\x39\x63\x99\x6a\x40\xa3\xe1\x0f\x04\x97\x76\x63\xe6\xca\x2c\x3b\x2d\x5d\x08\x13\xad\x2f\xac\xee\xd6\xc6\xe7\x30\x1e\xff\x0c\x39\x73\x6a\x2d\xdd\xee\x33\xee\x1e\x02\x7a\x96\x65\x24\xe6\x2b\xd5\xf2\x51\xfc\x6f\x95\x59\x02\xa5\x32\x36\x8a\xee\xc0\x1a\xbd\x83\x76\x88\x83\x15\xee\xa0\x1a\x22\x47\x39\xcb\x02\x63\x99\x47\xac\xa3\x05\x4e\x9a\xda\xae\xd5\x77\x14\x53\xdc\xcc\x11\x6b\x9e\xb3\xec\x9b\x74\x80\x2e\xfd\xac\x63\xd9\xe9\x29\x4c\x88\x70\xdd\x12\xd0\x1d\xc2\xf5\x74\x7e\x75\x53\x82\x57\x35\x82\x6d\x40\x1a\x58\xcc\xe2\x0d\xcb\x6c\x64\x3c\xb0\xeb\xb1\x82\x3e\x24\x37\x22\xe9\xa1\xe6\x9c\x5c\x57\x11\x8f\xc9\x14\xf0\xde\x16\xf0\x86\x01\x97\xe7\xe5\xae\x45\x5f\x00\xb9\x0e\xf3\x4f\x89\xe7\xbf\x31\x18\xa5\xf7\x46\x5c\xc5\x4c\x1b\x3e\x5a\x98\x64\x01\xd9\x47\x91\xd7\x13\x02\x9f\xa4\xcf\xe0\x9d\x1f\x15\x91\x6f\xef\x4b\xdf\xab\x06\x8c\x25\x10\x53\x7b\x61\x0d\xe1\x96\x42\xa8\x68\x1b\x2b\xab\x86\xb3\x38\x97\xd5\x6a\xe9\x6c\x67\x6a\x9e\xf7\x3d\x9a\x3a\x04\x96\x0d\x90\x2f\x9d\xa7\x72\xcb\x13\xcb\x21\xc3\x8b\x8b\x5b\xab\xb4\x38\xc7\xa5\x32\x89\x43\x7b\x3c\xbc\x2b\xb7\xbc\xa2\x6d\x11\x0b\xbc\x57\x38\x0a\x94\xb3\xac\xc6\x06\x1d\xc4\xe1\xe5\x39\xf4\xf0\x15\xc6\x40\x5b\x71\x63\xb5\xbe\x95\xd5\x8a\xe7\x10\x62\x87\x1f\x7a\x61\xc5\x7e\x96\xdf\x2a\x3c\xf6\x04\x4d\x0d\x27\x21\x40\x3c\x35\x52\x7b\x4c\xa2\x05\xa4\x5c\xae\x4d\x83\x8e\xe7\x4f\x4f\xc7\xf5\xa8\x4b\xd2\xaf\x37\xe8\x45\x67\x2a\xdb\x19\x4a\x17\xcf\xa6\xec\x7e\x29\x79\x2e\x2e\x22\xe6\xc8\x52\x1e\x5d\x78\x99\x25\xbf\x97\x8d\x90\x24\x1c\x41\x1f\x9f\x40\x46\x1b\x69\x08\xac\x41\x70\x58\x59\x57\x17\xb0\xb4\x74\x36\x2a\x06\xfc\x3e\xe9\x67\xab\xb3\x98\x5d\x4e\xca\xab\xd7\x56\xe7\x77\x2c\xc7\xbe\x35\xc7\x7e\x44\x84\x10\x7f\x74\x95\x7e\x7d\xc6\xe2\x96\xff\xe5\x11\xfb\x47\x26\x2c\x30\xf6\x23\x00\x00\xff\xff\xd2\x23\x08\xc0\xd3\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"override.go":                                      overrideGo,
	"templates/17_upsert.go.tpl":                       templates17_upsertGoTpl,
	"templates/singleton/crdb_upsert.go.tpl":           templatesSingletonCrdb_upsertGoTpl,
	"templates_test/singleton/crdb_main_test.go.tpl":   templates_testSingletonCrdb_main_testGoTpl,
	"templates_test/singleton/crdb_suites_test.go.tpl": templates_testSingletonCrdb_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                     templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"override.go": &bintree{overrideGo, map[string]*bintree{}},
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_upsert.go.tpl": &bintree{templatesSingletonCrdb_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_main_test.go.tpl":   &bintree{templates_testSingletonCrdb_main_testGoTpl, map[string]*bintree{}},
			"crdb_suites_test.go.tpl": &bintree{templates_testSingletonCrdb_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
